import gradio as gr
import pandas as pd
from xgboost import XGBClassifier

# Load your dataset (this will be used for training)
DIR = "/content/drive/MyDrive/workspace/Orders/00145"
CATEGORICAL_COLUMNS = ['состояние', 'округ', 'метро', 'пешком/транспортом', 'категория объявления', 'город']
NUMERICAL_COLUMNS = ['общая площадь', 'этаж', 'время до станции', 'Этажность дома', 'широта', 'долгота', 'цена за метр объявления']
COLUMNS = CATEGORICAL_COLUMNS + NUMERICAL_COLUMNS

nan_fill_values = {
    "общая площадь" : 182.0,
    "этаж" : 1.0,
    "время до станции" : 8.0,
    "Этажность дома" : 9.0,
    "широта" : 55.74993,
    "долгота" : 37.58892,
    "цена за метр объявления" : 314110.0,
    "состояние" : "Типовой ремонт",
    "округ" : "ЦАО",
    "метро" : "Коммунарка",
    "пешком/транспортом" : "пешком",
    "категория объявления" : "Помещение свободного назначения (продажа)",
    "город" : "Москва",
    'distance_from_center': 10
}

metro_values = ['Бульвар Адмирала Ушакова', 'Прокшино', 'Ольховая', 'Кунцевская',
 'Авиамоторная', 'Потапово', 'Фрунзенская', 'Коптево', 'Сухаревская',
 'Нагорная', 'Пролетарская', 'Подрезково', 'Тушинская', 'Красносельская',
 'Преображенская площадь', 'Лианозово', 'Дмитровская', 'Коммунарка',
 'Варшавская', 'Бунинская аллея', 'Медведково', 'Солнцево', 'Ростокино',
 'Павелецкая', 'Мичуринский проспект', 'Мякинино', 'Красный Балтиец',
 'Белорусская', 'Перово', 'Курская', 'Краснопресненская',
 'Бульвар Рокоссовского', 'Щукинская', 'Крестьянская застава', 'Каховская',
 'Зорге', 'Воронцовская', 'Окружная', 'Отрадное', 'Ясенево', 'Автозаводская',
 'Бауманская', 'Трикотажная', 'Зеленоград — Крюково', 'Нагатинская',
 'Первомайская', 'Марьина Роща', 'Крылатское', 'Маяковская', 'Тульская',
 'Сретенский бульвар', 'Щёлковская', 'Технопарк', 'Алексеевская',
 'Китай-город', 'Речной вокзал', 'Кучино', 'Аминьевская', 'ЦСКА', 'Строгино',
 'Южная', 'Новокосино', 'Смоленская', 'Химки', 'Кропоткинская', 'Спартак',
 'Юго-Западная', 'Октябрьское поле', 'Локомотив', 'Некрасовка', 'Таганская',
 'Проспект Мира', 'Ленинский проспект', 'Рабочий посёлок', 'Полянка',
 'Красногорская', 'Электрозаводская', 'Петровско-Разумовская', 'Спортивная',
 'Арбатская', 'Тверская', 'Цветной бульвар', 'Шаболовская', 'Новогиреево',
 'Улица Академика Янгеля', 'Академическая', 'Улица 1905 года', 'Минская',
 'Москва-Сити', 'Фили', 'Чухлинка', 'Домодедовская', 'Люберцы', 'Новаторская',
 'Поклонная', 'Курьяново', 'Баррикадная', 'Физтех', 'Киевская', 'Кутузовская',
 'Пушкинская', 'Алтуфьево', 'Котельники', 'Шоссе Энтузиастов', 'ЗИЛ',
 'Рязанский проспект', 'Ховрино', 'Парк Культуры', 'Профсоюзная', 'Измайлово',
 'Динамо', 'Ломоносовский проспект', 'Балтийская', 'Калитники', 'Аннино',
 'Университет', 'Верхние Лихоборы', 'Свиблово', 'Беговая', 'Бабушкинская',
 'Плющево', 'Серпуховская', 'Коломенская', 'Борисово', 'Хорошёво', 'Давыдково',
 'Подольск', 'Чистые пруды', 'Марьино', 'Улица Скобелевская', 'Сходненская',
 'Лермонтовский проспект', 'ВДНХ', 'Марксистская', 'Кожуховская', 'Сокол',
 'Коньково', 'Савёловская', 'Молодёжная', 'Пятницкое шоссе', 'Беломорская',
 'Царицыно', 'Жулебино', 'Озёрная', 'Текстильщики', 'Нижегородская', 'Пражская',
 'Чкаловская', 'Кантемировская', 'Нахимовский проспект', 'Кузьминки',
 'Войковская', 'Театральная', 'Павшино', 'Селигерская', 'Дегунино',
 'Ботанический сад', 'Римская', 'Новоясеневская', 'Гражданская',
 'Измайловская', 'Братиславская', 'Митино', 'Волоколамская', 'Лухмановская',
 'Стахановская', 'Опалиха', 'Остров мечты', 'Красные ворота', 'Площадь Ильича',
 'Народное Ополчение', 'Водный стадион', 'Очаково', 'Щербинка', 'Люблино',
 'Вавиловская', 'Молжаниново', 'Фирсановская', 'Моссельмаш',
 'Бульвар Дмитрия Донского', 'Тимирязевская', 'Раменки', 'Левобережная',
 'Волжская', 'Черкизовская', 'Волгоградский проспект', 'Сходня',
 'Улица Дмитриевского', 'Дубровка', 'Силикатная', 'Новослободская',
 'Новопеределкино', 'Окская', 'Карамышевская', 'Улица Горчакова', 'Владыкино',
 'Петровский Парк', 'Сокольники', 'Трубная', 'Тропарёво', 'Рижская',
 'Добрынинская', 'Новые Черёмушки', 'Бутырская', 'Верхние котлы', 'Шелепиха',
 'Панфиловская', 'Планерная', 'Лобня', 'Лесопарковая', 'Полежаевская',
 'Калужская', 'Октябрьская', 'Каширская', 'Говорово', 'Хорошёвская',
 'Филёвский парк', 'Парк Победы', 'Студенческая', 'Аэропорт', 'Мнёвники',
 'Новокузнецкая', 'Стрешнево', 'Перерва', 'Достоевская', 'Семёновская',
 'Сетунь', 'Боровицкая', 'Салтыковская', 'Комсомольская', 'Железнодорожная',
 'Москва-Товарная', 'Охотный ряд', 'Яхромская', 'Лубянка', 'Третьяковская',
 'Деловой центр', 'Депо', 'Филатов Луг', 'Лихоборы', 'Беляево', 'Москворечье',
 'Реутов', 'Чеховская', 'Ухтомская', 'Новоподрезково', 'Славянский бульвар',
 'Водники', 'Бибирево', 'Печатники', 'Проспект Вернадского', 'Пенягино',
 'Зюзино', 'Соколиная гора', 'Красный Строитель', 'Шипиловская',
 'Битцевский парк', 'Улица Старокачаловская', 'Улица Сергея Эйзенштейна',
 'Аникеевка', 'Матвеевская', 'Каспийская', 'Панки', 'Крымская', 'Тургеневская',
 'Лефортово', 'Фонвизинская', 'Телецентр', 'Менделеевская', 'Серебряный Бор',
 'Новохохловская', 'Шереметьевская', 'Воробьёвы горы', 'Юго-Восточная',
 'Тёплый Стан', 'Угрешская', 'Улица Академика Королёва', 'Площадь Гагарина',
 'Зябликово', 'Кузнецкий мост', 'Боровское шоссе', 'Партизанская',
 'Хлебниково', 'Выхино', 'Пионерская', 'Бескудниково', 'Грачёвская',
 'Красногвардейская', 'Андроновка', 'Багратионовская', 'Алма-Атинская',
 'Немчиновка', 'Хорошево', 'Бутово', 'Улица Милашенкова', 'Покровское',
 'Орехово', 'Саларьево', 'Летово', 'Кавказский бульвар', 'Чертановская',
 'Ольгино', 'Суворовская', 'Косино', 'Никольское', 'Александровский сад',
 'Белокаменная', 'Кусково', 'Площадь трёх вокзалов', 'Сортировочная',
 'Долгопрудная', 'Мещерская', 'Марк', 'Лужники', 'Библиотека им. Ленина',
 'Бирюлёво', 'Бульвар Генерала Карбышева', 'Сколково', 'Кленовый бульвар',
 'Рассказовка', 'Гольяново', 'Площадь Революции', 'Новодачная', 'Терехово',
 'Вешняки', 'Битца', 'Серп и Молот', 'Университет Дружбы Народов',
 'Севастопольская', 'Нагатинский Затон']
okrug_values = ['НАО (Новомосковский)', 'ЗАО', 'ВАО', 'ЦАО', 'САО', 'ЮАО', 'СЗАО', 'СВАО',
 'ЮЗАО', 'ЮВАО', 'ЗелАО']
category_values = ['Помещение свободного назначения (продажа)', 'Офис (продажа)',
 'Здание (продажа)', 'Торговая площадь (продажа)']
city_values = ['Сосенское поселение', 'Москва', 'Химки', 'Люберцы', 'Мытищи', 'Балашиха',
 'Красногорск', 'Подольск']
condition_values = ['Типовой ремонт', 'Под чистовую отделку',
 'Требуется капитальный ремонт', 'Дизайнерский ремонт',
 'Требуется косметический ремонт', 'Офисная отделка']
transport_values = ['транспортом', 'пешком']


# load `/content/xgb_model_1.pkl`
import pickle
import xgboost as xgb


# Path to the saved XGBoost model

# Load the model using pickle
with open('./models/xgb_model_1.pkl', 'rb') as model_file:
    xgb_model_1 = pickle.load(model_file)

with open('./models/xgb_model_2.pkl', 'rb') as model_file:
    xgb_model_2 = pickle.load(model_file)

# with open('/content/mlp_model_1.pkl', 'rb') as model_file:
#     xgb_model_1 = pickle.load(model_file)

models = {
  "xgb_1" : xgb_model_1,
  "xgb_2" : xgb_model_2,
  #"mlp_1" : mlp_model_1
}

from geopy.distance import great_circle


# Define the prediction function
def predict_user_input(*user_input_values):
    # Initialize a dictionary with all model features set to 0

    user_input_keys = ["Метро", "Округ", "Город", "Категория объявления", "Состояние", "Общая площадь","Этаж", "Этажность дома", "Время до станции", "пешком/транспортом", "Широта", "Долгота"]
    print(user_input_values)
    user_input = dict(zip(user_input_keys, user_input_values))
    model = models[user_input_values[-1]]
    input_data = {feature: 0 for feature in model.feature_names_in_}

    # Map the numerical fields directly
    input_data['общая площадь'] = user_input['Общая площадь']
    input_data['этаж'] = user_input['Этаж']
    input_data['время до станции'] = user_input['Время до станции']
    input_data['Этажность дома'] = user_input['Этажность дома']
    input_data['широта'] = user_input['Широта']
    input_data['долгота'] = user_input['Долгота']

    # Set one-hot encoded fields
    # состояние
    state_feature = f"состояние_{user_input['Состояние']}"
    if state_feature in input_data:
        input_data[state_feature] = 1

    # округ
    district_feature = f"округ_{user_input['Округ']}"
    if district_feature in input_data:
        input_data[district_feature] = 1

    # метро
    metro_feature = f"метро_{user_input['Метро']}"
    if metro_feature in input_data:
        input_data[metro_feature] = 1

    # пешком/транспортом
    walk_transit_feature = f"пешком/транспортом_{user_input['пешком/транспортом']}"
    if walk_transit_feature in input_data:
        input_data[walk_transit_feature] = 1

    # категория объявления
    category_feature = f"категория объявления_{user_input['Категория объявления']}"
    if category_feature in input_data:
        input_data[category_feature] = 1

    # Convert the dictionary into a DataFrame (single-row) to pass to the model
    input_df = pd.DataFrame([input_data])

    # Optional: Print the resulting DataFrame to check if it's correctly prepared
    # Coordinates of Moscow city center
    moscow_center_coords = (55.7558, 37.6173)

    # Calculate the distance from Moscow's center
    input_df['distance_from_center'] = input_df.apply(
        lambda row: great_circle((row['широта'], row['долгота']), moscow_center_coords).kilometers, axis=1
    )

    # Now, the input_df can be passed to the XGBoost model for predictions
    predictions = model.predict(input_df)

    return predictions[0]

import gradio as gr

# Create Gradio interface
with gr.Blocks() as interface:
    # Title and description with an image for branding
    gr.Markdown("""
    # 🏙️ Прогноз стоимости недвижимости
    ### Введите данные о недвижимости, чтобы получить оценку стоимости за квадратный метр
    """)
    # Grouping inputs into collapsible sections for better organization
    with gr.Accordion("Местоположение объекта"):
        inputs = []
        inputs.append(gr.Dropdown(choices=metro_values, label="Метро", info="Выберите ближайшую станцию метро"))
        inputs.append(gr.Dropdown(choices=okrug_values, label="Округ", info="Выберите административный округ"))
        inputs.append(gr.Dropdown(choices=city_values, label="Город", info="Выберите город"))

    with gr.Accordion("Детали объекта"):
        inputs.append(gr.Dropdown(choices=category_values, label="Категория объявления", info="Выберите тип недвижимости"))
        inputs.append(gr.Dropdown(choices=condition_values, label="Состояние", info="Выберите состояние объекта"))
        inputs.append(gr.Slider(label='Общая площадь (м²)', minimum=10, maximum=300, value=30, step=1, info="Общая площадь в квадратных метрах"))
        inputs.append(gr.Slider(label='Этаж', minimum=1, maximum=50, value=2, step=1, info="Номер этажа квартиры"))
        inputs.append(gr.Slider(label='Этажность дома', minimum=1, maximum=50, value=5, step=1, info="Общее количество этажей в доме"))

    with gr.Accordion("Транспорт и доступность"):
        inputs.append(gr.Slider(label='Время до станции (минуты)', minimum=1, maximum=60, value=5, step=1, info="Время до ближайшей станции (минуты)"))
        inputs.append(gr.Dropdown(choices=transport_values, value="пешком", label='До станции', info="Выберите способ передвижения до станции"))

    with gr.Accordion("Географические координаты"):
        inputs.append(gr.Number(label='Широта', info="Широта объекта"))
        inputs.append(gr.Number(label='Долгота', info="Долгота объекта"))

    # New section for selecting the model
    with gr.Accordion("Выбор модели для предсказания"):
        model_selection = gr.Radio(
            choices=list(models.keys()),
            label="Выберите модель",
            info="Выберите модель, которая будет использоваться для предсказания стоимости"
        )

    # Adding a nice divider to make it visually appealing
    gr.Markdown("---")

    # Display the prediction result
    output = gr.Textbox(label="💲 Оценка цены за квадратный метр")

    # Button to trigger prediction with a different color
    submit_btn = gr.Button("📊 Оценить", variant="primary")

    # Add a spinner or loading indicator while prediction is being made
    with gr.Row():
        with gr.Column():
            submit_btn.click(fn=predict_user_input, inputs=inputs + [model_selection], outputs=output)
            gr.Markdown("#### ⏳ Пожалуйста, подождите, пока идет расчет оценки...")

# Launch the Gradio interface
interface.launch(server_name="0.0.0.0", server_port=8080)

